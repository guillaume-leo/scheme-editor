name: release-tauri-app

on:
  push:
    branches:
      - main
    paths:
      - "**/package.json"

jobs:
  check-windows:
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2
      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: get version
        run: |
          $version = (node -p "require('./package.json').version")
          [string]::Format("PACKAGE_VERSION={0}", $version) | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo $Env:GITHUB_ENV
        shell: pwsh
  check-build:
    needs: check-windows
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v2
      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: install rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: install webkit2gtk
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.0
      - run: yarn
      - name: build scoot-map-manager for tauri app
        run: yarn build
      - run: cargo install tauri-bundler --force
      - name: build tauri app
        run: npm run tauri:build

  create-release:
    needs: check-build
    runs-on: ubuntu-latest
    outputs:
      RELEASE_UPLOAD_URL: ${{ steps.create_tauri_release.outputs.upload_url }}

    steps:
      - uses: actions/checkout@v2
      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: get version
        run: |
          $version = (node -p "require('./package.json').version")
          [string]::Format("PACKAGE_VERSION={0}", $version) | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo $Env:GITHUB_ENV
        shell: pwsh
      - name: create release
        id: create_tauri_release
        uses: jbolda/create-release@v1.1.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
        with:
          tag_name: v${{ env.PACKAGE_VERSION }}
          release_name: "SCOOT Map Manager v${{ env.PACKAGE_VERSION }}"
          body: |
            # Installers
            - ```.AppImage``` - any linux distro
            - ```.deb``` - debian based linux distros (ubuntu)
            - ```.dmg``` - macos
            - ```.msi``` - windows
            # Updaters
            - ```.AppImage.tar.gz``` - linux
            - ```.app.tar.gz``` - macos
            - ```.msi.zip``` - windows
            **NOTE: ONLY USE IN APP DIALOG TO UPDATE SMM**"
          draft: true
          prerelease: false

  create-and-upload-assets:
    needs: create-release
    runs-on: ${{ matrix.platform }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - platform: ubuntu-latest
            buildFolder: bundle/deb
            updateFolder: bundle/appimage
            name: "scoot-map-manager"
            ext: "_amd64.deb"
            updateExt: "_amd64.AppImage.tar.gz"
            compressed: ""
          - platform: macos-latest
            buildFolder: bundle/dmg
            updateFolder: bundle/macos
            name: "SCOOT Map Manager"
            ext: "_x64.dmg"
            updateExt: ".app.tar.gz"
            compressed: ""
          - platform: windows-latest
            buildFolder: bundle/msi
            updateFolder: bundle/msi
            name: "SCOOT Map Manager"
            ext: "_x64.msi"
            updateExt: "_x64.msi.zip"
            compressed: ""

    steps:
      - uses: actions/checkout@v2
      - name: setup node
        uses: actions/setup-node@v1
        with:
          node-version: 16
      - name: install rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
      - name: install webkit2gtk (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y webkit2gtk-4.0
      - run: cargo install tauri-bundler --force
      - run: yarn
      - name: build scoot-map-manager for tauri app
        run: yarn build
      - name: build tauri app
        run: |
          cd src-tauri && cargo update && cd ../
          npm run tauri:build
      - name: get version
        run: |
          $version = (node -p "require('./package.json').version")
          [string]::Format("PACKAGE_VERSION={0}", $version) | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
          echo $Env:GITHUB_ENV
        shell: pwsh
      - name: upload release asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
        with:
          upload_url: ${{ needs.create-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ${{ format('./src-tauri/target/release/{0}/{1}_{2}{3}{4}', matrix.buildFolder, matrix.name, env.PACKAGE_VERSION, matrix.ext, matrix.compressed ) }}
          asset_name: ${{ format('{0}_{1}{2}{3}', matrix.name, env.PACKAGE_VERSION, matrix.ext, matrix.compressed ) }}
          asset_content_type: application/zip
      - name: upload release asset appimage
        if: matrix.platform == 'ubuntu-latest'
        id: upload-release-asset-appimage
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
        with:
          upload_url: ${{ needs.create-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ${{ format('./src-tauri/target/release/bundle/appimage/{0}_{1}_amd64.AppImage{2}', matrix.name, env.PACKAGE_VERSION, matrix.compressed ) }}
          asset_name: ${{ format('{0}_{1}_amd64.AppImage{2}', matrix.name, env.PACKAGE_VERSION, matrix.compressed ) }}
          asset_content_type: application/zip
      - name: upload update asset
        if: matrix.platform != 'macos-latest'
        id: upload-update-asset
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
        with:
          upload_url: ${{ needs.create-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ${{ format('./src-tauri/target/release/{0}/{1}_{2}{3}{4}', matrix.updateFolder, matrix.name, env.PACKAGE_VERSION, matrix.updateExt, matrix.compressed ) }}
          asset_name: ${{ format('{0}_{1}{2}{3}', matrix.name, env.PACKAGE_VERSION, matrix.updateExt, matrix.compressed ) }}
          asset_content_type: application/zip
      - name: upload update asset macos
        if: matrix.platform == 'macos-latest'
        id: upload-update-asset-macos
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: "true"
        with:
          upload_url: ${{ needs.create-release.outputs.RELEASE_UPLOAD_URL }}
          asset_path: ${{ format('./src-tauri/target/release/{0}/{1}{2}', matrix.updateFolder, matrix.name, matrix.updateExt) }}
          asset_name: ${{ format('{0}_{1}{2}{3}', matrix.name, env.PACKAGE_VERSION, matrix.updateExt, matrix.compressed ) }}
          asset_content_type: application/zip